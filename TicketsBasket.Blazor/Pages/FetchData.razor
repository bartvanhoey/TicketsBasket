@page "/fetchdata"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient Http
@inject Microsoft.AspNetCore.Components.WebAssembly.Authentication.IAccessTokenProvider AccessTokenProvider
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration

@attribute [Authorize]

<h1>Weather forecast</h1>
<h2>Token: @token</h2>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;
    string token = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
        token = await GetAccessTokenAsync();
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    async Task<string> GetAccessTokenAsync()
    {
        var tokenResult = await AccessTokenProvider.RequestAccessToken(new AccessTokenRequestOptions
        {
            Scopes = new [] { Configuration["AzureAdB2C:Scope"]}
        });

        var IsSuccess = tokenResult.TryGetToken(out var accessToken);
        if (IsSuccess) return accessToken.Value;
        return null;

    }
}
